---
title: Death Cerificae Data Analysis
format:
  html:
    toc: true
    toc-location: left
    number-sections: false

webr:
  packages: ["tidyverse", "GGally"]
filters:
  - webr
---
```{r date, include=FALSE}
# Get the current date
current_date <- Sys.Date()

# Extract the year from the current date
current_year <- format(current_date, "%Y")
```

```{webr-r}
#| context: setup

# Load required libraries
library(tidyverse)

# Load required data files

# demographic data files
download.file('https://raw.githubusercontent.com/sipbs-compbiol/BM214-Workshop-3/main/assets/data/AM_Bay_01/AM_Bay_01_01.csv', 'AM_Bay_01_01.csv')
```

::: {.panel-tabset}
# Introduction

This page provides a `WebR` cell for you to use as a tool and playground to analyse data from and about your city's pandemic scenario. [explain why]

::: callout-tip
If you are unfamiliar with R, or if this is your first time working with R, you may find some of the following resources helpful:
-
:::

This `WebR` instance has the `tidyverse` package already installed for you, so you do not need to load it using the `library(tidyverse)` command. The [tidyverse](https://www.tidyverse.org/) package contains ggplot2, dplyr, readr, and a number of other packages that make working with data in R easier.

::: {.callout-important collapse="false"}
Please note that all of these data are available remotely through a cloud server and you can work with them using the webR instance in this browser window - you do not need to install R or download the files to your own computer. 

However, you do need to make sure you are working with the correct data. Please make sure you carefully check the filename(s) for your particular pandemic scenario.
:::

::: callout-tip
You may divide the data analysis tasks and work through the sections in this document in any order you choose. 

As  you work through each task, note that there are tips and hints that you can expand for additional help. 
:::


## WebR Playground

```{webr-r}
# Use this WebR cell to experiment with any additional data visualisation(s)  you would like to perform with your pandemic data
```


# City Demographic Data Analysis

## Demographic Data: Step 1--Load and Examine Your City's Demographic Data

The demographic data for your city is in a file `demographics_groupX.csv` (where you replace X with your group letter; e.g., the file for group A will be `demographics_groupA.csv`). You can load this using the `read_csv()` function. 

Once you have loaded your data, you will want to examine it to ensure that it has loaded correctly, and to ensure that you understand how the data is structured. You can do this using `glimpse()`, which will summarize the number of rows and columns present in your data and give a glimpse of the columns; or by using `head()`, which will output the first part of your dataset.

When you use the `head()` function, it displays the first six rows of your data by default. However, you can customize this to view a different number of rows by specifying the number of rows you want to see. The general syntax for the head() function with a specified number of rows is: head(data_frame, n) where data_frame is your data frame (in this case, demographic_data) and n is the number of rows you want to view. For example, if you want to view the first 10 rows of your data instead of the default 6, you can use the following command: `head(demographic_data, 10)`


::: {.callout-important title="Task"}
Use the `WebR` cell below to load and examine your data.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `read_csv()` to load your data.
- Use `head()` or `glimpse()` to examine your data.
:::

```{webr-r}
# Use the read_csv(), and head() or glimpse() functions to load and examine your data.

```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to load and examine your data.

```r
# Replace 'X' with your group letter to load the correct file
demographic_data <- read_csv("data_sets/demographics_groupA.csv")

# View the first few rows of the data
head(demographic_data)

# Alternatively, you can use glimpse() to get an overview of the data
glimpse(demographic_data)
```
:::


## Demographic Data: Step 2--Plotting Your Data

Now that you have loaded and examined your data, you can visualize it by creating a plot. We'll use `ggplot2` from the tidyverse to plot counts for each category over the years.

::: {.callout-important title="Task"}
Use the `WebR` cell below to create a plot of the counts for each category over the years.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `ggplot()` to initialize the plot with your data and aesthetic mappings.
- Add `geom_line()` to create line plots.
- Use `labs()` to add titles and labels to your plot.
- Apply a theme, such as `theme_minimal()`, to control the appearance of your plot. You could also choose another [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html).
:::

```{webr-r}
# Use ggplot() to create a plot of the counts for each category over the years.

```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to create your plot.

```r
# Create the plot
ggplot(demographic_data, aes(x = Year, y = Count, color = Category)) + #This initializes the plot with `demographic_data`, mapping the `Year` to the x-axis, `Count` to the y-axis, and `Category` to the color of the lines.
  geom_line() + #This adds line plots to represent the data.
  labs(title = "Category Counts by Year",
       x = "Year",
       y = "Count",
       color = "Category") + #This adds a title and labels to the plot.
  theme_minimal() #This applies a minimal theme for a clean and simple plot appearance.
```
:::

  
## Demographic Data: Step 3--Filtering and Plotting Your Data

You can see from examining and plotting your data that there are three different categories present in your demographic dataset: age, gender, and employment. It may be more helpful to create a plot specifically for each of these categories. For example, you might first filter the data based on age and then plot it. You may also similarly explore the other demographic categories (employment and gender). 

::: {.callout-important title="Task"}
Use the `WebR` cell below to filter your data for age-related categories and create a plot.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- You may find it helpful to define a new variable with an informative name to store your filtered data.
- Use `filter()` filter the data.
- Use `str_detect()` to find categories containing "Age". Note that this will match strings quite literally (capitalisation matters!).
- Plot the new data with `ggplot()` and `geom_line()`. You can modify the plot (i.e. to add labels, adjust the theme, etc.) as you did in the previous step.
:::

```{webr-r}
# Filter your data for "Age" and other categories and create plots of the filtered data.


```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to filter your data and create the plot.

```r
# Filter data for Age categories
# 
age_data <- demographic_data %>% filter(str_detect(Category, "Age"))  #Filters the `demographic_data` to include only rows where the `Category` column contains the word "Age"

# Create a plot for Age categories
ggplot(age_data, aes(x = Year, y = Count, color = Category)) + #This will initialize a plot with the filtered `age_data`, mapping `Year` to the x-axis, `Count` to the y-axis, and `Category` to the color of the lines.
  geom_line() + #This adds line plots to represent the age-category data.
  labs(x = "Year",
       y = "Total Count") + #This adds labels to the x and y axes.
  theme_minimal() #This applies a minimal theme
  
# Filter data for Gender categories
gender_data <- demographic_data %>% filter(str_detect(Category, "Gender"))

# Create a plot for Gender categories
ggplot(gender_data, aes(x = Year, y = Count, color = Category)) + #This will initialize a plot with the filtered `gender_data`, mapping `Year` to the x-axis, `Count` to the y-axis, and `Category` to the color of the lines.
  geom_line() + #This adds line plots to represent the gender-category data.
  labs(x = "Year",
       y = "Total Count") + #This adds labels to the x and y axes.
  theme_minimal() #This applies a minimal theme

# Filter data for Employment categories
employment_data <- demographic_data %>% filter(str_detect(Category, "Employment"))

# Create a plot for Employment categories
ggplot(employment_data, aes(x = Year, y = Count, color = Category)) + #This will initialize a plot with the filtered `employment_data`, mapping `Year` to the x-axis, `Count` to the y-axis, and `Category` to the color of the lines.
  geom_line() + #This adds line plots to represent the employment-category data.
  labs(x = "Year",
       y = "Total Count") + #This adds labels to the x and y axes.
  theme_minimal() #This applies a minimal theme
```
:::

## Demographic Data: Step 4--Summarizing Data for the Current Year

Now that you have filtered and plotted your demographic data for different categories, the next step is to focus on the data for the current year (`r current_year`). We will filter the data for the year 2024, view the summarized data, and then calculate the total city population for that year. This will give us an overall picture of the city's population distribution in `r current_year`.

To accomplish this, we will use several functions from the `dplyr` and `stringr` packages in R:

- **`filter()`**: This function is used to subset the rows of a data frame that meet certain conditions. In our case, we'll use it to select rows where the year is `r current_year`.
  
- **`print()`**: This basic R function displays the data or results in the console. We'll use it to view the filtered data for `r current_year`.
  
- **`mutate()`**: This function adds new variables or modifies existing ones in a data frame. We'll use it to create a new column that extracts the general category from the `Category` column.
  
- **`str_extract()`**: Part of the `stringr` package, this function extracts matching patterns from strings. We'll use it to extract the part of the `Category` string before the colon (`:`).
  
- **`group_by()`**: This function groups the data by one or more variables. Grouping is necessary before applying summary functions like `sum()`.
  
- **`summarise()`**: This function creates summary statistics for each group defined by `group_by()`. We'll use it to calculate the total count for each general category by summing the counts within each group.


::: {.callout-important title="Task"}
Use the `WebR` cell below to filter your data for the year `r current_year`, view the summarized data, and calculate the total city population.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `filter()` to select rows where the `Year` is `r current_year`.
- Use `print()` to display the summarized data for `r current_year`.
- To calculate the total city population, extract the general category using `str_extract()` and group by this new category.
- Sum the `Count` for each category using `summarise()`.
:::

```{webr-r}
# Filter your data for the current year, view the summarized data, and calculate the total city population.


```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to filter your data, view the summarized data, and calculate the total city population.

```r
# Step 4: Filter data for the current year
summary_data_`r current_year` <- demographic_data %>%
  filter(Year == `r current_year`)  # Filters the data to include only rows where the Year column is `r current_year`

# View the summarized data for the current year
print(summary_data_`r current_year`)  # Prints the filtered data for the year `r current_year`

# Calculate total city population in `r current_year`
# Extract the general category and sum the counts
result <- summary_data_`r current_year` %>%
  mutate(GeneralCategory = str_extract(Category, "^[^:]+")) %>%  # Extracts the general category from the Category column
  group_by(GeneralCategory) %>%  # Groups the data by the new GeneralCategory
  summarise(TotalCount = sum(Count))  # Sums the Count for each general category

# Print the result
print(result)  # Prints the summarized total counts for each general category
```
:::

# Budget Analysis

## Budget Data: Step 1--Load and Examine Your City's Budget Data

The budget data for your city is in a file `budget_groupX.csv` (where you replace X with your group letter; e.g., the file for group A will be `budget_groupA.csv`). You can load this using the `read_csv()` function. 

Once you have loaded your data, you will want to examine it to ensure that it has loaded correctly, and to ensure that you understand how the data is structured. You can do this using `glimpse()`, which will summarize the number of rows and columns present in your data and give a glimpse of the columns; or by using `head()`, which will output the first part of your dataset.

When you use the `head()` function, it displays the first six rows of your data by default. However, you can customize this to view a different number of rows by specifying the number of rows you want to see. The general syntax for the head() function with a specified number of rows is: head(data_frame, n) where data_frame is your data frame (in this case, you might name your data frame something like "budget") and n is the number of rows you want to view. For example, if you want to view the first 10 rows of your data instead of the default 6, you can use the following command: `head(budget, 10)`


::: {.callout-important title="Task"}
Use the `WebR` cell below to load and examine your data.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `read_csv()` to load your data.
- Use `head()` or `glimpse()` to examine your data.
:::

```{webr-r}
# Use the read_csv(), and head() or glimpse() functions to load and examine your data.

```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to load and examine your data.

```r
# Replace 'X' with your group letter to load the correct file
budget <- read_csv("data_sets/budget_groupA.csv")

# View the first few rows of the data
head(budget)

# Alternatively, you can use glimpse() to get an overview of the data
glimpse(budget)
```
:::

## Budget Data: Step 2--Plot the Data

Now that you have loaded and examined your data, you can visualize it. To begin, you might create plots for both `Revenue` and `Expenditure` over the years, using the `ggplot2` package.

::: {.callout-important title="Task"}
Use the `WebR` cell below to plot the `Revenue` and `Expenditure` data separately.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `ggplot()` to initialize the plot.
- Use `geom_line()` and `geom_point()` to add lines and points to the plot.
- Use `labs()` to add labels and titles to your plot.
:::

```{webr-r}
# Use ggplot2 to plot the Revenue and Expenditure data separately

```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to plot the `Revenue` and `Expenditure` data separately.

```r
# Filter out rows with NA in Revenue - this will give you your budget expenditures
expenditure <- budget %>%
  filter(!is.na(Revenue))

# Filter out rows with NA in Expenditure - this will give you your budget revenues
revenue <- budget %>%
  filter(!is.na(Expenditure))
  
# Examine the filtered data to ensure they have been filtered correctly
print(expenditure)
print(revenue)

# Plot Revenue over Year
ggplot(revenue, aes(x = Year, y = Revenue, color = Category)) +
  geom_line() +
  geom_point() +
  labs(title = "Revenue by Year",
       x = "Year",
       y = "Amount",
       color = "Category") +
  theme_minimal()

# Plot Expenditure over Year
ggplot(expenditure, aes(x = Year, y = Expenditure, color = Category)) +
  geom_line() +
  geom_point() +
  labs(title = "Expenditure by Year",
       x = "Year",
       y = "Amount",
       color = "Category") +
  theme_minimal()
```
:::

## Budget Data: Step 3--Summarize the Current Year's Budget

To get a summary of the current year's budget, you can use the `filter()` function to select the data for the current year (`r current_year`) and then use `sum()` to get an overview of the budget (totals for revenues and expenditures).

You also may find it helpful to examine particular aspects of the budget in detail - for instance, the amount of money budgeted for contingency expenditures for the current year. You can do this using the `print()` function.

::: {.callout-important title="Task"}
Use the `WebR` cell below to get a summary of the current year's budget.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `filter()` to select the data for the current year.
- Use `sum()` to get totals for the budgeted revenues and expenditures.
- Use `print()` to get selected data, such as the contingency expenditure budget for the current year.
:::

```{webr-r}
# Use filter(), and sum() to get a sum of the current year's total revenues and expenditures budgets. Use print

```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to get a summary of the current year's budget.

```r
# Filter the data for the current year
current_budget <- budget %>%
  filter(Year == `r current_year`)

# View the current year's budget
print(current_budget)

# Get the sum of Revenues for the current year
revenue_sum <- sum(current_budget$Revenue, na.rm = TRUE)
print(revenue_sum)

# Get the sum of Expenditures for the current year
expenditure_sum <- sum(current_budget$Expenditure, na.rm = TRUE)
print(expenditure_sum)

#Print the budget for contingency expenditures for the current year
print(budget$Expenditure[budget$Year == `r current_year` & budget$Category == "Contingency Expenditures"])

```
:::

# Polling Data Analysis 

## Polling Data: Step 1--Load and Examine Your City's Polling Data

The budget data for your city is in a file `polling_groupX.csv` (where you replace X with your group letter; e.g., the file for group A will be `polling_groupA.csv`). You can load this using the `read_csv()` function. 

Once you have loaded your data, you will want to examine it to ensure that it has loaded correctly, and to ensure that you understand how the data is structured. You can do this using `glimpse()`, which will summarize the number of rows and columns present in your data and give a glimpse of the columns; or by using `head()`, which will output the first part of your dataset.

When you use the `head()` function, it displays the first six rows of your data by default. However, you can customize this to view a different number of rows by specifying the number of rows you want to see. The general syntax for the head() function with a specified number of rows is: head(data_frame, n) where data_frame is your data frame (in this case, you might name your data frame something like "polls") and n is the number of rows you want to view. For example, if you want to view the first 10 rows of your data instead of the default 6, you can use the following command: `head(polls, 10)`


::: {.callout-important title="Task"}
Use the `WebR` cell below to load and examine your data.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `read_csv()` to load your data.
- Use `head()` or `glimpse()` to examine your data.
:::

```{webr-r}
# Use the read_csv(), and head() or glimpse() functions to load and examine your data.

```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to load and examine your data.

```r
# Replace 'X' with your group letter to load the correct file
polls <- read_csv("data_sets/polling_groupA.csv")

# View the first few rows of the data
head(polls)

# Alternatively, you can use glimpse() to get an overview of the data
glimpse(polls)
```
:::

## Budget Data: Step 2--Plot the Data

Now that you have loaded and examined your data, you can visualize it. To begin, you might create plots for both `Revenue` and `Expenditure` over the years, using the `ggplot2` package.

# Budget Analysis

# Pandemic Case Data

# Pandemic Death Data

:::

