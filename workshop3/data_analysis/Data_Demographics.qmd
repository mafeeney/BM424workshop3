---
title: Demographic Data Analysis
format:
  html:
    toc: true
    toc-location: left
    number-sections: false

webr:
  packages: ["tidyverse", "GGally"]
filters:
  - webr
---
```{r date, include=FALSE}
# Get the current date
current_date <- Sys.Date()

# Extract the year from the current date
current_year <- format(current_date, "%Y")
```

```{webr-r}
#| context: setup

# Load required libraries
library(tidyverse)

# Load required data files

# demographic data files
download.file('https://raw.githubusercontent.com/mafeeney/BM424workshop3/main/workshop3/data_sets/demographics_groupA.csv', 'demographics_groupA.csv')
```

# City Demographic Data Analysis

## Demographic Data: Step 1--Load and Examine Your City's Demographic Data

The demographic data for your city is in a file `demographics_groupX.csv` (where you replace X with your group letter; e.g., the file for group A will be `demographics_groupA.csv`). You can load this using the `read_csv()` function. 

Once you have loaded your data, you will want to examine it to ensure that it has loaded correctly, and to ensure that you understand how the data is structured. You can do this using `glimpse()`, which will summarize the number of rows and columns present in your data and give a glimpse of the columns; or by using `head()`, which will output the first part of your dataset.

When you use the `head()` function, it displays the first six rows of your data by default. However, you can customize this to view a different number of rows by specifying the number of rows you want to see. The general syntax for the head() function with a specified number of rows is: head(data_frame, n) where data_frame is your data frame (in this case, demographic_data) and n is the number of rows you want to view. For example, if you want to view the first 10 rows of your data instead of the default 6, you can use the following command: `head(demographic_data, 10)`


::: {.callout-important title="Task"}
Use the `WebR` cell below to load and examine your data.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `read.csv()` to load your data.
- Use `head()` or `glimpse()` to examine your data.
:::

```{webr-r}
# Use the read.csv(), and head() or glimpse() functions to load and examine your data.

```

::: {.callout-warning collapse="true" title="Help! I'm stuck!"}
Use the `R` code below to load and examine your data.

```r
# Replace 'X' with your group letter to load the correct file
demographic_data <- read_csv("demographics_groupX.csv")

# View the first few rows of the data
head(demographic_data)

# Alternatively, you can use glimpse() to get an overview of the data
glimpse(demographic_data)
```
:::

::: {.callout-note collapse="true" title="Understanding your results"}

If you ran `glimpse(demographic_data)`, your results probably look something like this: 
```{r}
#| eval: false
Rows: 60
Columns: 3
$ Year     <int> 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2…
$ Category <chr> "Age: 0-14", "Age: 15-24", "Age: 25-44", "Age: 45-64", "Age: …
$ Count    <int> 14992, 41866, 57453, 44526, 18384, 9669, 87828, 95062, 4000, …
```

While if you ran `head(demographic_data, 10)`, you will likely have seen something like this: 
```{r}
#| eval: false
   Year             Category  Count
1  2020            Age: 0-14  14992
2  2020           Age: 15-24  41866
3  2020           Age: 25-44  57453
4  2020           Age: 45-64  44526
5  2020           Age: 65-74  18384
6  2020             Age: 75+   9669
7  2020         Gender: Male  87828
8  2020       Gender: Female  95062
9  2020        Gender: Other   4000
10 2020 Employment: Employed 127570
```

You can tell from these looks at your demographic data, that it gives the number of people (Count) in different categories over the years. You can also tell (from `glimpse`) that there are 60 rows and 3 columns in your dataset; and the *type* of data in each column (int = integer, chr = character or string values).
:::

## Demographic Data: Step 2--Plotting Your Data

Now that you have loaded and examined your data, you can visualize it by creating a plot. We'll use `ggplot2` from the tidyverse to plot counts for each category over the years.

ggplot2 is an R package for creating graphics and visualizations. It uses a systematic way of thinking about and building plots called the "Grammar of Graphics", which allows you to build graphs by combining independent components. Each graph can be built up of layers, which are added to the base plot using the + operator. 

You will want to point ggplot2 at the data you want to visualise (the data frame; in this case, `demographic_data`), and add geometric objects (geoms) such as points or lines showing your data. You will want to define the visual properties (aesthetics, or aes) of the plot (e.g., the x and y positions, colours/shapes/sizes of objects in the plot). You may also want to customise the graph further, for example by selecting a theme and/or editing the labels on the graph.

::: {.callout-important title="Task"}
Use the `WebR` cell below to create a plot of the counts for each category over the years.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `ggplot()` to initialize the plot with your data and aesthetic mappings.
- Add `geom_line()` to create line plots.
- Use `labs()` to add titles and labels to your plot.
- Apply a theme, such as `theme_minimal()`, to control the appearance of your plot. You could also choose another [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html).
:::

```{webr-r}
# Use ggplot() to create a plot of the counts for each category over the years.

```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to create your plot.

```r
# Create the plot
ggplot(demographic_data, aes(x = Year, y = Count, color = Category)) + #This initializes the plot with `demographic_data`, mapping the `Year` to the x-axis, `Count` to the y-axis, and `Category` to the color of the lines.
  geom_line() + #This adds line plots to represent the data.
  labs(title = "Category Counts by Year",
       x = "Year",
       y = "Count",
       color = "Category") + #This adds a title and labels to the plot.
  theme_minimal() #This applies a minimal theme for a clean and simple plot appearance.
```
:::

::: {.callout-note collapse="true" title="Understanding your results"}
If you ran the command below:
```{r}
#| eval: false

ggplot(demographic_data, aes(x = Year, y = Count, color = Category)) + #This initializes the plot with `demographic_data`, mapping the `Year` to the x-axis, `Count` to the y-axis, and `Category` to the color of the lines.
  geom_line() + #This adds line plots to represent the data.
  labs(title = "Category Counts by Year",
       x = "Year",
       y = "Count",
       color = "Category") + #This adds a title and labels to the plot.
  theme_minimal() #This applies a minimal theme for a clean and simple plot appearance. 
```

you have probably generated a plot that looks something like this: 

![Figure 1. Initial plot of demographic_data](data-images/demog-plot1.png){ width=75% height=75% }

This is a reasonable first attempt at plotting these data, but you may find it difficult to interpret the data: it can be hard to interpret the colours for the different categories, and you do not get a clear idea of the total population from this graph.

:::  

## Demographic Data: Step 3--Filtering and Plotting Your Data

You should have seen from examining and plotting your data that there are three different categories present in your demographic dataset: age, gender, and employment. It may be more helpful to create a plot specifically for each of these categories. For example, you might first filter the data based on age and then plot it. You may also similarly explore the other demographic categories (employment and gender). 

::: {.callout-important title="Task"}
Use the `WebR` cell below to filter your data for age-related categories and create a plot.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- You may find it helpful to define a new variable with an informative name to store your filtered data.
- Use `filter()` filter the data.
- Use `str_detect()` to find categories containing "Age". Note that this will match strings quite literally (capitalisation matters!).
- Plot the new data with `ggplot()` and `geom_line()`. You can modify the plot (i.e. to add labels, adjust the theme, etc.) as you did in the previous step.
:::

```{webr-r}
# Filter your data for "Age" and other categories and create plots of the filtered data.


```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to filter your data and create the plot.

```r
# Filter data for Age categories
# 
age_data <- demographic_data %>% filter(str_detect(Category, "Age"))  #Filters the `demographic_data` to include only rows where the `Category` column contains the word "Age"

# Create a plot for Age categories
ggplot(age_data, aes(x = Year, y = Count, color = Category)) + #This will initialize a plot with the filtered `age_data`, mapping `Year` to the x-axis, `Count` to the y-axis, and `Category` to the color of the lines.
  geom_line() + #This adds line plots to represent the age-category data.
  labs(x = "Year",
       y = "Total Count") + #This adds labels to the x and y axes.
  theme_minimal() #This applies a minimal theme
  
# Filter data for Gender categories
gender_data <- demographic_data %>% filter(str_detect(Category, "Gender"))

# Create a plot for Gender categories
ggplot(gender_data, aes(x = Year, y = Count, color = Category)) + #This will initialize a plot with the filtered `gender_data`, mapping `Year` to the x-axis, `Count` to the y-axis, and `Category` to the color of the lines.
  geom_line() + #This adds line plots to represent the gender-category data.
  labs(x = "Year",
       y = "Total Count") + #This adds labels to the x and y axes.
  theme_minimal() #This applies a minimal theme

# Filter data for Employment categories
employment_data <- demographic_data %>% filter(str_detect(Category, "Employment"))

# Create a plot for Employment categories
ggplot(employment_data, aes(x = Year, y = Count, color = Category)) + #This will initialize a plot with the filtered `employment_data`, mapping `Year` to the x-axis, `Count` to the y-axis, and `Category` to the color of the lines.
  geom_line() + #This adds line plots to represent the employment-category data.
  labs(x = "Year",
       y = "Total Count") + #This adds labels to the x and y axes.
  theme_minimal() #This applies a minimal theme
```
:::

::: {.callout-note collapse="true" title="Understanding your results"}
If you ran the command below:
```{r}
#| eval: false
```
:::

## Demographic Data: Step 4--Summarizing Data for the Current Year

Now that you have filtered and plotted your demographic data for different categories, the next step is to focus on the data for the current year (`r current_year`). We will filter the data for the year 2024, view the summarized data, and then calculate the total city population for that year. This will give us an overall picture of the city's population distribution in `r current_year`.

To accomplish this, we will use several functions from the `dplyr` and `stringr` packages in R:

- **`filter()`**: This function is used to subset the rows of a data frame that meet certain conditions. In our case, we'll use it to select rows where the year is `r current_year`.
  
- **`print()`**: This basic R function displays the data or results in the console. We'll use it to view the filtered data for `r current_year`.
  
- **`mutate()`**: This function adds new variables or modifies existing ones in a data frame. We'll use it to create a new column that extracts the general category from the `Category` column.
  
- **`str_extract()`**: Part of the `stringr` package, this function extracts matching patterns from strings. We'll use it to extract the part of the `Category` string before the colon (`:`).
  
- **`group_by()`**: This function groups the data by one or more variables. Grouping is necessary before applying summary functions like `sum()`.
  
- **`summarise()`**: This function creates summary statistics for each group defined by `group_by()`. We'll use it to calculate the total count for each general category by summing the counts within each group.


::: {.callout-important title="Task"}
Use the `WebR` cell below to filter your data for the year `r current_year`, view the summarized data, and calculate the total city population.
:::

::: {.callout-tip collapse="true"}
## I need a hint!
- Use `filter()` to select rows where the `Year` is `r current_year`.
- Use `print()` to display the summarized data for `r current_year`.
- To calculate the total city population, extract the general category using `str_extract()` and group by this new category.
- Sum the `Count` for each category using `summarise()`.
:::

```{webr-r}
# Filter your data for the current year, view the summarized data, and calculate the total city population.


```

::: {.callout-warning collapse="true"}
## Help! I'm stuck!

Use the `R` code below to filter your data, view the summarized data, and calculate the total city population.

```r
# Step 4: Filter data for the current year
summary_data_`r current_year` <- demographic_data %>%
  filter(Year == `r current_year`)  # Filters the data to include only rows where the Year column is `r current_year`

# View the summarized data for the current year
print(summary_data_`r current_year`)  # Prints the filtered data for the year `r current_year`

# Calculate total city population in `r current_year`
# Extract the general category and sum the counts
result <- summary_data_`r current_year` %>%
  mutate(GeneralCategory = str_extract(Category, "^[^:]+")) %>%  # Extracts the general category from the Category column
  group_by(GeneralCategory) %>%  # Groups the data by the new GeneralCategory
  summarise(TotalCount = sum(Count))  # Sums the Count for each general category

# Print the result
print(result)  # Prints the summarized total counts for each general category
```
:::

## WebR Playground

```{webr-r}
# Use this WebR cell to experiment with any additional data visualisation(s)  you would like to perform with your pandemic data
```


